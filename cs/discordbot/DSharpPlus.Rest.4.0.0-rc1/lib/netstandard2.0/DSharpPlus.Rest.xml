<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DSharpPlus.Rest</name>
    </assembly>
    <members>
        <member name="P:DSharpPlus.DiscordRestClient.Guilds">
            <summary>
            Gets the dictionary of guilds cached by this client.
            </summary>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.InitializeCacheAsync">
            <summary>
            Initializes cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGuildAsync(System.String,System.String,System.String,System.Nullable{DSharpPlus.Entities.VerificationLevel},System.Nullable{DSharpPlus.Entities.DefaultMessageNotifications})">
            <summary>
            Creates a new guild
            </summary>
            <param name="name">New guild's name</param>
            <param name="region_id">New guild's region ID</param>
            <param name="iconb64">New guild's icon (base64)</param>
            <param name="verification_level">New guild's verification level</param>
            <param name="default_message_notifications">New guild's default message notification level</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteGuildAsync(System.UInt64)">
            <summary>
            Deletes a guild
            </summary>
            <param name="id">guild id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildAsync(System.UInt64,DSharpPlus.Entities.Optional{System.String},DSharpPlus.Entities.Optional{System.String},DSharpPlus.Entities.Optional{DSharpPlus.Entities.VerificationLevel},DSharpPlus.Entities.Optional{DSharpPlus.Entities.DefaultMessageNotifications},DSharpPlus.Entities.Optional{DSharpPlus.Entities.MfaLevel},DSharpPlus.Entities.Optional{DSharpPlus.Entities.ExplicitContentFilter},DSharpPlus.Entities.Optional{System.Nullable{System.UInt64}},DSharpPlus.Entities.Optional{System.Int32},DSharpPlus.Entities.Optional{System.String},DSharpPlus.Entities.Optional{System.UInt64},DSharpPlus.Entities.Optional{System.String},DSharpPlus.Entities.Optional{System.Nullable{System.UInt64}},System.String)">
            <summary>
            Modifies a guild
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="name">New guild Name</param>
            <param name="region">New guild voice region</param>
            <param name="verification_level">New guild verification level</param>
            <param name="default_message_notifications">New guild default message notification level</param>
            <param name="mfa_level">New guild MFA level</param>
            <param name="explicit_content_filter">New guild explicit content filter level</param>
            <param name="afk_channel_id">New guild AFK channel id</param>
            <param name="afk_timeout">New guild AFK timeout in seconds</param>
            <param name="iconb64">New guild icon (base64)</param>
            <param name="owner_id">New guild owner id</param>
            <param name="splashb64">New guild spalsh (base64)</param>
            <param name="systemChannelId">New guild system channel id</param>
            <param name="reason">Modify reason</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildAsync(System.UInt64,System.Action{DSharpPlus.Net.Models.GuildEditModel})">
            <summary>
            Modifies a guild
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="action">Guild modifications</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildBansAsync(System.UInt64)">
            <summary>
            Gets guild bans
            </summary>
            <param name="guild_id">Guild id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGuildBanAsync(System.UInt64,System.UInt64,System.Int32,System.String)">
            <summary>
            Creates guild ban
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="user_id">User id</param>
            <param name="delete_message_days">Days to delete messages</param>
            <param name="reason">Reason why this member was banned</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.RemoveGuildBanAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Removes a guild ban
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="user_id">User to unban</param>
            <param name="reason">Reason why this member was unbanned</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.LeaveGuildAsync(System.UInt64)">
            <summary>
            Leaves a guild
            </summary>
            <param name="guild_id">Guild id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.AddGuildMemberAsync(System.UInt64,System.UInt64,System.String,System.String,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordRole},System.Boolean,System.Boolean)">
            <summary>
            Adds a member to a guild
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="user_id">User id</param>
            <param name="access_token">Access token</param>
            <param name="nick">User nickname</param>
            <param name="roles">User roles</param>
            <param name="muted">Whether this user should be muted on join</param>
            <param name="deafened">Whether this user should be deafened on join</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ListGuildMembersAsync(System.UInt64,System.Nullable{System.Int32},System.Nullable{System.UInt64})">
            <summary>
            Gets all guild members
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="limit">Member download limit</param>
            <param name="after">Gets members after this ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.AddGuildMemberRoleAsync(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Add role to guild member
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="user_id">User id</param>
            <param name="role_id">Role id</param>
            <param name="reason">Reason this role gets added</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.RemoveGuildMemberRoleAsync(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Remove role from member
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="user_id">User id</param>
            <param name="role_id">Role id</param>
            <param name="reason">Reason this role gets removed</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.UpdateRolePositionAsync(System.UInt64,System.UInt64,System.Int32,System.String)">
            <summary>
            Updates a role's position
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="role_id">Role id</param>
            <param name="position">Role position</param>
            <param name="reason">Reason this position was modified</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.UpdateChannelPositionAsync(System.UInt64,System.UInt64,System.Int32,System.String)">
            <summary>
            Updates a channel's position
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="channel_id">Channel id</param>
            <param name="position">Channel position</param>
            <param name="reason">Reason this position was modified</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildWidgetAsync(System.UInt64)">
            <summary>
            Gets a guild's widget
            </summary>
            <param name="guild_id">Guild id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildWidgetSettingsAsync(System.UInt64)">
            <summary>
            Gets a guild's widget settings
            </summary>
            <param name="guild_id">Guild id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildWidgetSettingsAsync(System.UInt64,System.Nullable{System.Boolean},System.Nullable{System.UInt64},System.String)">
            <summary>
            Modifies a guild's widget settings
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="enabled">If the widget is enabled or not</param>
            <param name="channel_id">Widget channel id</param>
            <param name="reason">Reason the widget settings were modified</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGuildChannelAsync(System.UInt64,System.String,DSharpPlus.ChannelType,System.Nullable{System.UInt64},DSharpPlus.Entities.Optional{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordOverwriteBuilder},System.Nullable{System.Boolean},DSharpPlus.Entities.Optional{System.Nullable{System.Int32}},System.String)">
            <summary>
            Creates a guild channel
            </summary>
            <param name="id">Channel id</param>
            <param name="name">Channel name</param>
            <param name="type">Channel type</param>
            <param name="parent">Channel parent id</param>
            <param name="topic">Channel topic</param>
            <param name="bitrate">Voice channel bitrate</param>
            <param name="userLimit">Voice channel user limit</param>
            <param name="overwrites">Channel overwrites</param>
            <param name="nsfw">Whether this channel should be marked as NSFW</param>
            <param name="perUserRateLimit">Slow mode timeout for users.</param>
            <param name="reason">Reason this channel was created</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyChannelAsync(System.UInt64,System.String,System.Nullable{System.Int32},DSharpPlus.Entities.Optional{System.String},System.Nullable{System.Boolean},DSharpPlus.Entities.Optional{System.Nullable{System.UInt64}},System.Nullable{System.Int32},System.Nullable{System.Int32},DSharpPlus.Entities.Optional{System.Nullable{System.Int32}},System.String)">
            <summary>
            Modifies a channel
            </summary>
            <param name="id">Channel id</param>
            <param name="name">New channel name</param>
            <param name="position">New channel position</param>
            <param name="topic">New channel topic</param>
            <param name="nsfw">Whether this channel should be marked as NSFW</param>
            <param name="parent">New channel parent</param>
            <param name="bitrate">New voice channel bitrate</param>
            <param name="userLimit">New voice channel user limit</param>
            <param name="perUserRateLimit">Slow mode timeout for users.</param>
            <param name="reason">Reason why this channel was modified</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyChannelAsync(System.UInt64,System.Action{DSharpPlus.Net.Models.ChannelEditModel})">
            <summary>
            Modifies a channel
            </summary>
            <param name="channelId">Channel id</param>
            <param name="action">Channel modifications</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetChannelAsync(System.UInt64)">
            <summary>
            Gets a channel object
            </summary>
            <param name="id">Channel id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteChannelAsync(System.UInt64,System.String)">
            <summary>
            Deletes a channel
            </summary>
            <param name="id">Channel id</param>
            <param name="reason">Reason why this channel was deleted</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetMessageAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets message in a channel
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="message_id">Message id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateMessageAsync(System.UInt64,System.String,System.Nullable{System.Boolean},DSharpPlus.Entities.DiscordEmbed,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.IMention})">
            <summary>
            Sends a message
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="content">Message (text) content</param>
            <param name="tts">Whether this message is a text-to-speech message</param>
            <param name="embed">Embed to attach</param>
            <param name="mentions">Allowed mentions in the message</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.UploadFileAsync(System.UInt64,System.IO.Stream,System.String,System.String,System.Nullable{System.Boolean},DSharpPlus.Entities.DiscordEmbed,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.IMention})">
            <summary>
            Uploads a file
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="file_data">File data</param>
            <param name="file_name">File name</param>
            <param name="content">Message (text) content</param>
            <param name="tts">Whether this message is a text-to-speech message</param>
            <param name="embed">Embed to attach</param>
            <param name="mentions">Allowed mentions in the message</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.UploadFilesAsync(System.UInt64,System.Collections.Generic.Dictionary{System.String,System.IO.Stream},System.String,System.Nullable{System.Boolean},DSharpPlus.Entities.DiscordEmbed,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.IMention})">
            <summary>
            Uploads multiple files
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="files">Files to attach (filename, data)</param>
            <param name="content">Message (text) content</param>
            <param name="tts">Whether this message is a text-to-speech message</param>
            <param name="embed">Embed to attach</param>
            <param name="mentions">Allowed mentions in the message</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildChannelsAsync(System.UInt64)">
            <summary>
            Gets channels from a guild
            </summary>
            <param name="guild_id">Guild id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetChannelMessagesAsync(System.UInt64,System.Int32,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Gets messages from a channel
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="limit">Limit of messages to get</param>
            <param name="before">Gets messages before this id</param>
            <param name="after">Gets messages after this id</param>
            <param name="around">Gets messages around this id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetChannelMessageAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets a message from a channel
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="message_id">Message id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.EditMessageAsync(System.UInt64,System.UInt64,DSharpPlus.Entities.Optional{System.String},DSharpPlus.Entities.Optional{DSharpPlus.Entities.DiscordEmbed})">
            <summary>
            Edits a message
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="message_id">Message id</param>
            <param name="content">New message content</param>
            <param name="embed">New message embed</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteMessageAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes a message
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="message_id">Message id</param>
            <param name="reason">Why this message was deleted</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteMessagesAsync(System.UInt64,System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <summary>
            Deletes multiple messages
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="message_ids">Message ids</param>
            <param name="reason">Reason these messages were deleted</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetChannelInvitesAsync(System.UInt64)">
            <summary>
            Gets a channel's invites
            </summary>
            <param name="channel_id">Channel id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateChannelInviteAsync(System.UInt64,System.Int32,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a channel invite
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="max_age">For how long the invite should exist</param>
            <param name="max_uses">How often the invite may be used</param>
            <param name="temporary">Whether this invite should be temporary</param>
            <param name="unique">Whether this invite should be unique (false might return an existing invite)</param>
            <param name="reason">Why you made an invite</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteChannelPermissionAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes channel overwrite
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="overwrite_id">Overwrite id</param>
            <param name="reason">Reason it was deleted</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.EditChannelPermissionsAsync(System.UInt64,System.UInt64,DSharpPlus.Permissions,DSharpPlus.Permissions,System.String,System.String)">
            <summary>
            Edits channel overwrite
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="overwrite_id">Overwrite id</param>
            <param name="allow">Permissions to allow</param>
            <param name="deny">Permissions to deny</param>
            <param name="type">Overwrite type</param>
            <param name="reason">Reason this overwrite was created</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.TriggerTypingAsync(System.UInt64)">
            <summary>
            Send a typing indicator to a channel
            </summary>
            <param name="channel_id">Channel id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetPinnedMessagesAsync(System.UInt64)">
            <summary>
            Gets pinned messages
            </summary>
            <param name="channel_id">Channel id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.UnpinMessageAsync(System.UInt64,System.UInt64)">
            <summary>
            Unpuns a message
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="message_id">Message id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.JoinGroupDmAsync(System.UInt64,System.String)">
            <summary>
            Joins a group DM
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="nickname">Dm nickname</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GroupDmAddRecipientAsync(System.UInt64,System.UInt64,System.String,System.String)">
            <summary>
            Adds a member to a group DM
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="user_id">User id</param>
            <param name="access_token">User's access token</param>
            <param name="nickname">Nickname for user</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.LeaveGroupDmAsync(System.UInt64)">
            <summary>
            Leaves a group DM
            </summary>
            <param name="channel_id">Channel id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GroupDmRemoveRecipientAsync(System.UInt64,System.UInt64)">
            <summary>
            Removes a member from a group DM
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="user_id">User id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGroupDmAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.UInt64,System.String})">
            <summary>
            Creates a group DM
            </summary>
            <param name="access_tokens">Access tokens</param>
            <param name="nicks">Nicknames per user</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGroupDmWithCurrentUserAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.UInt64,System.String})">
            <summary>
            Creates a group DM with current user
            </summary>
            <param name="access_tokens">Access tokens</param>
            <param name="nicks">Nicknames</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateDmAsync(System.UInt64)">
            <summary>
            Creates a DM
            </summary>
            <param name="recipient_id">Recipient user id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.FollowChannelAsync(System.UInt64,System.UInt64)">
            <summary>
            Follows a news channel
            </summary>
            <param name="channel_id">Id of the channel to follow</param>
            <param name="webhook_channel_id">Id of the channel to crosspost messages to</param>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the current user doesn't have <see cref="F:DSharpPlus.Permissions.ManageWebhooks"/> on the target channel</exception>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CrosspostMessageAsync(System.UInt64,System.UInt64)">
            <summary>
            Publishes a message in a news channel to following channels
            </summary>
            <param name="channel_id">Id of the news channel the message to crosspost belongs to</param>
            <param name="message_id">Id of the message to crosspost</param>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">
                Thrown when the current user doesn't have <see cref="F:DSharpPlus.Permissions.ManageWebhooks"/> and/or <see cref="F:DSharpPlus.Permissions.SendMessages"/> 
            </exception>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetCurrentUserAsync">
            <summary>
            Gets current user object
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetUserAsync(System.UInt64)">
            <summary>
            Gets user object
            </summary>
            <param name="user">User id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildMemberAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets guild member
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="member_id">Member id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.RemoveGuildMemberAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Removes guild member
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="user_id">User id</param>
            <param name="reason">Why this user was removed</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyCurrentUserAsync(System.String,System.String)">
            <summary>
            Modifies current user
            </summary>
            <param name="username">New username</param>
            <param name="base64_avatar">New avatar (base64)</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyCurrentUserAsync(System.String,System.IO.Stream)">
            <summary>
            Modifies current user
            </summary>
            <param name="username">username</param>
            <param name="avatar">avatar</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetCurrentUserGuildsAsync(System.Int32,System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Gets current user's guilds
            </summary>
            <param name="limit">Limit of guilds to get</param>
            <param name="before">Gets guild before id</param>
            <param name="after">Gets guilds after id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildMemberAsync(System.UInt64,System.UInt64,DSharpPlus.Entities.Optional{System.String},DSharpPlus.Entities.Optional{System.Collections.Generic.IEnumerable{System.UInt64}},DSharpPlus.Entities.Optional{System.Boolean},DSharpPlus.Entities.Optional{System.Boolean},DSharpPlus.Entities.Optional{System.Nullable{System.UInt64}},System.String)">
            <summary>
            Modifies guild member
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="user_id">User id</param>
            <param name="nick">New nickname</param>
            <param name="role_ids">New roles</param>
            <param name="mute">Whether this user should be muted</param>
            <param name="deaf">Whether this user should be deafened</param>
            <param name="voice_channel_id">Voice channel to move this user to</param>
            <param name="reason">Reason this user was modified</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyAsync(System.UInt64,System.UInt64,System.Action{DSharpPlus.Net.Models.MemberEditModel})">
            <summary>
            Modifies a member
            </summary>
            <param name="member_id">Member id</param>
            <param name="guild_id">Guild id</param>
            <param name="action">Modifications</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyCurrentMemberNicknameAsync(System.UInt64,System.String,System.String)">
            <summary>
            Changes current user's nickname
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="nick">Nickname</param>
            <param name="reason">Reason why you set it to this</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildRolesAsync(System.UInt64)">
            <summary>
            Gets roles
            </summary>
            <param name="guild_id">Guild id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildAsync(System.UInt64,System.Nullable{System.Boolean})">
            <summary>
            Gets a guild.
            </summary>
            <param name="guild_id">The guild ID to search for.</param>
            <param name="with_counts">Whether to include approximate presence and member counts in the returned guild.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildRoleAsync(System.UInt64,System.UInt64,System.String,System.Nullable{DSharpPlus.Permissions},System.Nullable{DSharpPlus.Entities.DiscordColor},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Modifies a role
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="role_id">Role id</param>
            <param name="name">New role name</param>
            <param name="permissions">New role permissions</param>
            <param name="color">New role color</param>
            <param name="hoist">Whether this role should be hoisted</param>
            <param name="mentionable">Whether this role should be mentionable</param>
            <param name="reason">Why this role was modified</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildRoleAsync(System.UInt64,System.UInt64,System.Action{DSharpPlus.Net.Models.RoleEditModel})">
            <summary>
            Modifies a role
            </summary>
            <param name="role_id">Role id</param>
            <param name="guild_id">Guild id</param>
            <param name="action">Modifications</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteGuildRoleAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes a role
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="role_id">Role id</param>
            <param name="reason">Reason why this role was deleted</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGuildRoleAsync(System.UInt64,System.String,System.Nullable{DSharpPlus.Permissions},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Creates a new role
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="name">Role name</param>
            <param name="permissions">Role permissions</param>
            <param name="color">Role color</param>
            <param name="hoist">Whether this role should be hoisted</param>
            <param name="mentionable">Whether this role should be mentionable</param>
            <param name="reason">Reason why this role was created</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildPruneCountAsync(System.UInt64,System.Int32,System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Get a guild's prune count.
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="days">Days to check for</param>
            <param name="include_roles">The roles to be included in the prune.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.BeginGuildPruneAsync(System.UInt64,System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <summary>
            Begins a guild prune.
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="days">Days to prune for</param>
            <param name="compute_prune_count">Whether to return the prune count after this method completes. This is discouraged for larger guilds.</param>
            <param name="include_roles">The roles to be included in the prune.</param>
            <param name="reason">Reason why this guild was pruned</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildIntegrationsAsync(System.UInt64)">
            <summary>
            Gets guild integrations
            </summary>
            <param name="guild_id">Guild id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGuildIntegrationAsync(System.UInt64,System.String,System.UInt64)">
            <summary>
            Creates guild integration
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="type">Integration type</param>
            <param name="id">Integration id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildIntegrationAsync(System.UInt64,System.UInt64,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Modifies a guild integration
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="integration_id">Integration id</param>
            <param name="expire_behaviour">Expiration behaviour</param>
            <param name="expire_grace_period">Expiration grace period</param>
            <param name="enable_emoticons">Whether to enable emojis for this integration</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteGuildIntegrationAsync(System.UInt64,DSharpPlus.Entities.DiscordIntegration)">
            <summary>
            Removes a guild integration
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="integration">Integration to remove</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.SyncGuildIntegrationAsync(System.UInt64,System.UInt64)">
            <summary>
            Syncs guild integration
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="integration_id">Integration id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildEmbedAsync(System.UInt64)">
            <summary>
            Gets guild embed
            </summary>
            <param name="guild_id">Guild id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildEmbedAsync(System.UInt64,DSharpPlus.Entities.DiscordGuildEmbed)">
            <summary>
            Modifies a guild embed
            </summary>
            <param name="guild_id">Guild id</param>
            <param name="embed">New guild embed</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildVoiceRegionsAsync(System.UInt64)">
            <summary>
            Get a guild's voice region
            </summary>
            <param name="guild_id">Guild id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildInvitesAsync(System.UInt64)">
            <summary>
            Get a guild's invites
            </summary>
            <param name="guild_id">Guild id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetInvite(System.String,System.Nullable{System.Boolean})">
            <summary>
            Gets an invite.
            </summary>
            <param name="invite_code">The invite code.</param>
            <param name="withCounts">Whether to include presence and total member counts in the returned invite.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteInvite(System.String,System.String)">
            <summary>
            Removes an invite
            </summary>
            <param name="invite_code">Invite code</param>
            <param name="reason">Reason why this invite was removed</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetUsersConnectionsAsync">
            <summary>
            Gets current user's connections
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateWebhookAsync(System.UInt64,System.String,System.String,System.String)">
            <summary>
            Creates a new webhook
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="name">Webhook name</param>
            <param name="base64_avatar">Webhook avatar (base64)</param>
            <param name="reason">Reason why this webhook was created</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateWebhookAsync(System.UInt64,System.String,System.IO.Stream,System.String)">
            <summary>
            Creates a new webhook
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="name">Webhook name</param>
            <param name="avatar">Webhook avatar</param>
            <param name="reason">Reason why this webhook was created</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetChannelWebhooksAsync(System.UInt64)">
            <summary>
            Gets all webhooks from a channel
            </summary>
            <param name="channel_id">Channel id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildWebhooksAsync(System.UInt64)">
            <summary>
            Gets all webhooks from a guild
            </summary>
            <param name="guild_id">Guild id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetWebhookAsync(System.UInt64)">
            <summary>
            Gets a webhook
            </summary>
            <param name="webhook_id">Webhook id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetWebhookWithTokenAsync(System.UInt64,System.String)">
            <summary>
            Gets a webhook with its token (when user is not in said guild)
            </summary>
            <param name="webhook_id">Webhook id</param>
            <param name="webhook_token">Webhook token</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyWebhookAsync(System.UInt64,System.UInt64,System.String,System.String,System.String)">
            <summary>
            Modifies a webhook
            </summary>
            <param name="webhook_id">Webhook id</param>
            <param name="channelId">The new channel id the webhook should be moved to.</param>
            <param name="name">New webhook name</param>
            <param name="base64_avatar">New webhook avatar (base64)</param>
            <param name="reason">Reason why this webhook was modified</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyWebhookAsync(System.UInt64,System.UInt64,System.String,System.IO.Stream,System.String)">
            <summary>
            Modifies a webhook
            </summary>
            <param name="webhook_id">Webhook id</param>
            <param name="channelId">The new channel id the webhook should be moved to.</param>
            <param name="name">New webhook name</param>
            <param name="avatar">New webhook avatar</param>
            <param name="reason">Reason why this webhook was modified</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyWebhookAsync(System.UInt64,System.String,System.String,System.String,System.String)">
            <summary>
            Modifies a webhook (when user is not in said guild)
            </summary>
            <param name="webhook_id">Webhook id</param>
            <param name="name">New webhook name</param>
            <param name="base64_avatar">New webhook avatar (base64)</param>
            <param name="webhook_token">Webhook token</param>
            <param name="reason">Reason why this webhook was modified</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyWebhookAsync(System.UInt64,System.String,System.IO.Stream,System.String,System.String)">
            <summary>
            Modifies a webhook (when user is not in said guild)
            </summary>
            <param name="webhook_id">Webhook id</param>
            <param name="name">New webhook name</param>
            <param name="avatar">New webhook avatar</param>
            <param name="webhook_token">Webhook token</param>
            <param name="reason">Reason why this webhook was modified</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteWebhookAsync(System.UInt64,System.String)">
            <summary>
            Deletes a webhook
            </summary>
            <param name="webhook_id">Webhook id</param>
            <param name="reason">Reason this webhook was deleted</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteWebhookAsync(System.UInt64,System.String,System.String)">
            <summary>
            Deletes a webhook (when user is not in said guild)
            </summary>
            <param name="webhook_id">Webhook id</param>
            <param name="reason">Reason this webhook was removed</param>
            <param name="webhook_token">Webhook token</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ExecuteWebhookAsync(System.UInt64,System.String,DSharpPlus.Entities.DiscordWebhookBuilder)">
            <summary>
            Sends a message to a webhook
            </summary>
            <param name="webhook_id">Webhook id</param>
            <param name="webhook_token">Webhook token</param>
            <param name="builder">Webhook builder filled with data to send.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateReactionAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Creates a new reaction
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="message_id">Message id</param>
            <param name="emoji">Emoji to react</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteOwnReactionAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes own reaction
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="message_id">Message id</param>
            <param name="emoji">Emoji to remove from reaction</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteUserReactionAsync(System.UInt64,System.UInt64,System.UInt64,System.String,System.String)">
            <summary>
            Deletes someone elses reaction
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="message_id">Message id</param>
            <param name="user_id">User id</param>
            <param name="emoji">Emoji to remove</param>
            <param name="reason">Reason why this reaction was removed</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetReactionsAsync(System.UInt64,System.UInt64,System.String,System.Nullable{System.UInt64},System.Int32)">
            <summary>
            Gets all users that reacted with a specific emoji to a message
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="message_id">Message id</param>
            <param name="emoji">Emoji to check for</param>
            <param name="after_id">Whether to search for reactions after this message id.</param>
            <param name="limit">The maximum amount of reactions to fetch.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetReactionsAsync(System.UInt64,System.UInt64,DSharpPlus.Entities.DiscordEmoji,System.Nullable{System.UInt64},System.Int32)">
            <summary>
            Gets all users that reacted with a specific emoji to a message
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="message_id">Message id</param>
            <param name="emoji">Emoji to check for</param>
            <param name="after_id">Whether to search for reactions after this message id.</param>
            <param name="limit">The maximum amount of reactions to fetch.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteAllReactionsAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes all reactions from a message
            </summary>
            <param name="channel_id">Channel id</param>
            <param name="message_id">Message id</param>
            <param name="reason">Reason why all reactions were removed</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetApplicationAssetsAsync(DSharpPlus.Entities.DiscordApplication)">
            <summary>
            Gets assets from an application
            </summary>
            <param name="application">Application to get assets from</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.Dispose">
            <summary>
            Disposes of this DiscordRestClient
            </summary>
        </member>
    </members>
</doc>
